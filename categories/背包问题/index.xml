<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>背包问题 on Bridge for us</title>
    <link>https://horizonnn.github.io/categories/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
    <description>Recent content in 背包问题 on Bridge for us</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Mar 2021 13:23:26 +0800</lastBuildDate><atom:link href="https://horizonnn.github.io/categories/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>动态规划</title>
      <link>https://horizonnn.github.io/p/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Wed, 31 Mar 2021 13:23:26 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/p/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>$$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$
动态规划 为什么需要动态规划 分治法通常将问题划分为互不相交的子问题，递归地求解子问题，从而得到原问题的解。但在不同的子问题具有公共地子子问题的时候，分治法会做很多重复性的工作。所以这时候就需要用到动态规划，动态规划对每个子子问题只求解一次，然后保存在表格中，这样通过空间换时间来避免不必要的重复计算工作。
举个例子来说就是有如下这样一个钢条切割的问题
钢条切割 假定我们知道Serling公司出售一段长度为i英寸的钢条的价格为p；（i=1，2，…，单位为美元）。钢条的长度均为整英寸。如下给出了一个价格表的样例。
   长度 1 2 3     价格 1 5 8    则给定一段长度为n英寸的钢条和一个价格表，求切割钢条方案，使得销售收益r最大。
我们如果采用分治法的思想，那么一个长度为n的的钢条就会有接近$2^{n-1}$种切割方式，因为距离钢条左端i (i=1, 2, &amp;hellip;, n-1)处，我们都可以选择切割或者不切割，但是这样指数上升的复杂度是随着问题规模增长而无法接受的。分治法的代码结构如下，当然下面的代码可以进一步优化，但是为了与动态规划进行对比说明，我们采用如下最直观的写法。
// restLength 代表从当前决策位置到最右端的钢条长度 // rewardArr 代表不同的切割长度的价格数组 int cut(int length, int* priceArr) { if (length == 0) return priceArr[preNoCutLength]; // 递归终止条件，当遍历到钢条最右端的时候返回  // 标识所有的递归结果中返回最大的  int maxReward = 0; // 循环递归调用，找到最大的返回值  for (int i=1; i&amp;lt;sizeof(priceArr)/sizeof(int); i++) { if (length-i &amp;gt; 0) { int reward = cut(length-i, priceArr); maxReward = maxReward &amp;gt; reward ?</description>
    </item>
    
  </channel>
</rss>
