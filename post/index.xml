<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bridge : you &amp; me</title>
    <link>https://horizonnn.github.io/post/</link>
    <description>Recent content in Posts on Bridge : you &amp; me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Sep 2019 20:37:36 +0800</lastBuildDate>
    
	<atom:link href="https://horizonnn.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用frp实现黑群晖内网穿透</title>
      <link>https://horizonnn.github.io/post/%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E9%BB%91%E7%BE%A4%E6%99%96%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Sat, 28 Sep 2019 20:37:36 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E9%BB%91%E7%BE%A4%E6%99%96%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid>
      <description>前一段时间捡了一台暴风酷播云矿机，想着拿来做NAS，装了黑群晖，无奈的是没有公网IP，只能局域网访问，因此需要做内网穿透。
搜了搜方法，感觉frp还是比较不错的方案，开搞！
相关链接  frp的github链接 群晖的中文官网  准备工具  使用frp做内网穿透，首先需要一台具有公网IP的主机，这里我租用了一台VPS 去frp的github链接里根据个人NAS以及公网IP主机的型号下载对应的压缩文件 去群晖官网下载drive client  配置过程 服务端  解压公网IP主机对应的frp文件，只保存frps和frps.ini文件，删掉其他文件
 将上述两个文件上传到公网IP主机中
 编辑frps.ini文件（vim frps.ini），写入以下内容
[common] bind_port = 7000 vhost_http_port = 7008 vhost_https_port = 7010 dashboard_port = 7001 dashboard_user = admin dashboard_pwd = 123456   其中7008是http连接的端口，7001是frp后台管理的端口
此外，在主机中开启7000、7008、7001、7010、6690（后文中会说到为什么开启这个端口）端口
 运行frps
./frps -c ./frps.ini   客户端  解压公网IP主机对应的frp文件，只保存frpc和frpc.ini文件，删掉其他文件
 将上述两个文件上传到NAS主机中
 编辑frpc.ini文件（vim frpc.ini），写入以下内容
[common] server_addr = XXX.XXX.XXX.XXX server_port = 7000 [web1] type = http local_ip = 127.</description>
    </item>
    
    <item>
      <title>吉大校园网路由器配置</title>
      <link>https://horizonnn.github.io/post/%E5%90%89%E5%A4%A7%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 14 Sep 2019 21:36:16 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E5%90%89%E5%A4%A7%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>设备配置 路由器：NETGEAR 4300 v1
网线两根
刷路由器固件  去openwrt官网找到路由器对应的固件版本下载下来（一定要结尾是img的包，结尾是tar的是升级包）、 用网线连接PC和路由器的LAN口，在网页中输入192.168.1.1进入路由器管理界面。默认用户名是admin，密码是password 找到路由器固件升级的选项，选择刚才下好的img文件，开始固件升级。升级结束后可以再次进入192.168.1.1，若能进入openwrt的管理界面，则代表成功，这时用户名改成root，密码改为admin。 拔掉路由器电源，关闭路由器电源按钮。静置30s后再插上电源打开（不然无法开启5G信号）  配置路由器  再此进入openwrt的管理界面，在wireless中配置路由器的无线设置（密码，频率等） 进入interface选项中，配置WAN口的IP、网关、子网掩码等（根据在校园网申请IP后得到的信息一一填写，校园网上的MAC地址需要填写路由器WAN口的MAC地址） 配置路由器的ssh  设置脚本  ssh进入路由器，并执行如下命令
opkg update opkg install python-light opkg install python-pip opkg install coreutils-nohup  去这个地址https://github.com/drcoms/jlu-drcom-client下载newclient.py脚本，并根据自己的IP信息修改代码中的config部分。
server = &#39;10.100.61.3&#39;#学校的认证服务器 username=&#39;zhuff5515&#39;#用户名，和客户端一样 password=&#39;11111111111&#39;#密码，和客户端一样 host_ip = &#39;49.140.110.110&#39;#自己申请的ip地址 mac = 0xf01e567fe76b#网络中心上注册时IP对应的MAC，必须是路由器的MAC地址 host_name = &#39;++++++++&#39;#计算机名,随便写，不要超过71个字符 host_os = &#39;Windows 10&#39;#操作系统，不要超过128个字符  通过ssh工具，将修改好的newclient.py放在路由器的/usr/bin目录
 cd进入/usr/bin目录，执行如下命令
nohup python newclient.py &amp;gt;/dev/null 2&amp;gt;&amp;amp;1   此时可以连上路由器的wifi或者LAN口，如果能够成功连接外网，则说明成功了。</description>
    </item>
    
    <item>
      <title>BugFlow</title>
      <link>https://horizonnn.github.io/post/bugflow/</link>
      <pubDate>Sun, 25 Aug 2019 21:21:34 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/bugflow/</guid>
      <description>基础问题 AttributeError: module &amp;lsquo;XXX&amp;rsquo; has no attribute &amp;lsquo;xxx&amp;rsquo; 原因：一般module和attribute的名字没有拼错的情况下，出现这类问题通常是因为这个py文件所在的目录中存在与module同名的py文件，导致python的错误调用。
解决办法：更改文件名。
Keras TypeError: Unexpected keyword argument passed to optimizer: name Traceback (most recent call last): File &amp;quot;visualizing_the_convnet.py&amp;quot;, line 3, in &amp;lt;module&amp;gt; model = load_model(&#39;cats_and_dogs_small_2.h5&#39;) File &amp;quot;D:\ProgramFiles\Anaconda3\envs\keras\lib\site-packages\tensorflow\python\keras\engine\saving.py&amp;quot;, line 249, in load_model optimizer_config, custom_objects=custom_objects) File &amp;quot;D:\ProgramFiles\Anaconda3\envs\keras\lib\site-packages\tensorflow\python\keras\optimizers.py&amp;quot;, line 838, in deserialize printable_module_name=&#39;optimizer&#39;) File &amp;quot;D:\ProgramFiles\Anaconda3\envs\keras\lib\site-packages\tensorflow\python\keras\utils\generic_utils.py&amp;quot;, line 194, in deserialize_keras_object return cls.from_config(cls_config) File &amp;quot;D:\ProgramFiles\Anaconda3\envs\keras\lib\site-packages\tensorflow\python\keras\optimizers.py&amp;quot;, line 159, in from_config return cls(**config) File &amp;quot;D:\ProgramFiles\Anaconda3\envs\keras\lib\site-packages\tensorflow\python\keras\optimizers.py&amp;quot;, line 247, in __init__ super(RMSprop, self).</description>
    </item>
    
  </channel>
</rss>