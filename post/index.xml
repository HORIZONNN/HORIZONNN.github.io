<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bridge : you &amp; me</title>
    <link>https://horizonnn.github.io/post/</link>
    <description>Recent content in Posts on Bridge : you &amp; me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Oct 2020 14:07:40 +0800</lastBuildDate><atom:link href="https://horizonnn.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenVaultMedia安装以及配置NextCloud</title>
      <link>https://horizonnn.github.io/post/openvaultmedia%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEnextcloud/</link>
      <pubDate>Mon, 05 Oct 2020 14:07:40 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/openvaultmedia%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEnextcloud/</guid>
      <description> OpenMediaVault(OMV)配置你的私有云盘&amp;ndash;NextCloud OMV搭建系列教程[8]  </description>
    </item>
    
    <item>
      <title>科学上网</title>
      <link>https://horizonnn.github.io/post/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Mon, 05 Oct 2020 14:02:05 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
      <description>相关网站  vps234（VPS购买汇总） shadowsocks主页 v2ray主页 检查IP是否能通  VPS推荐 搬瓦工没用过，vultr的话容易被ban IP。目前一直在用hostwinds，很稳定，而且hostwinds可以换IP，对于科学上网来说比较方便。
Shadowsocks[不推荐，现在不稳定] 安装python yum install python-setuptools easy_install pip firewall-cmd --zone=public --add-port=443/tcp --permanent firewall-cmd --reload 如果运行firewall-cmd命令出现Command not found的错误，则执行下列命令之后再执行上述firewall-cmd命令
yum install firewalld systemctl start firewalld 配置shadowsocks   安装shadowsocks
pip install shadowsocks vi /etc/shadowsocks.json # 以下为填写内容 { &amp;#34;server&amp;#34;:&amp;#34;ip_address&amp;#34;, &amp;#34;server_port&amp;#34;:443, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;your_password&amp;#34;, &amp;#34;timeout&amp;#34;:600, &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34; }   运行shadowsocks
# 使用配置文件 nohup ssserver -c /etc/shadowsocks.json &amp;amp; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 # 不使用配置文件 sudo ssserver -p {端口号} -k {密码}-m aes-256-cfb --user nobody -d start   配置BBR加速访问[可选] BBR的github地址：BBR</description>
    </item>
    
    <item>
      <title>深度学习重要参考资源</title>
      <link>https://horizonnn.github.io/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%87%8D%E8%A6%81%E5%8F%82%E8%80%83%E8%B5%84%E6%BA%90/</link>
      <pubDate>Wed, 30 Sep 2020 16:46:41 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%87%8D%E8%A6%81%E5%8F%82%E8%80%83%E8%B5%84%E6%BA%90/</guid>
      <description>书籍  Deep Learning Machine learning yearning Mathematics for machine learning  视频 组织或个人  fast.ai 李宏毅 苏剑林科学空间 mlcourse.ai  </description>
    </item>
    
    <item>
      <title>数学相关知识点</title>
      <link>https://horizonnn.github.io/post/%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Wed, 30 Sep 2020 16:28:29 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>统计学  详解最大似然估计、最大后验概率估计以及贝叶斯公式的理解 为什么样本方差里面要除以（n-1）而不是n  </description>
    </item>
    
    <item>
      <title>ToolsBugFlow</title>
      <link>https://horizonnn.github.io/post/toolsbugflow/</link>
      <pubDate>Sun, 27 Sep 2020 13:39:50 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/toolsbugflow/</guid>
      <description>Anaconda 1. CondaHTTPError SSLError Collecting package metadata (current_repodata.json): failed
CondaHTTPError: HTTP 000 CONNECTION FAILED for url https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/win-64/current_repodata.json Elapsed: -
An HTTP error occurred when trying to retrieve this URL. HTTP errors are often intermittent, and a simple retry will get you on your way. SSLError(MaxRetryError(&amp;lsquo;HTTPSConnectionPool(host=&#39;mirrors.tuna.tsinghua.edu.cn&#39;, port=443): Max retries exceeded with url: /anaconda/cloud/conda-forge/win-64/current_repodata.json (Caused by SSLError(&amp;ldquo;Can&#39;t connect to HTTPS URL because the SSL module is not available.&amp;quot;))&#39;))
PS C:\WINDOWS\system32&amp;gt; conda create -n rl-tf python=3.</description>
    </item>
    
    <item>
      <title>线性回归评估指标</title>
      <link>https://horizonnn.github.io/post/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/</link>
      <pubDate>Sat, 26 Sep 2020 11:09:07 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/</guid>
      <description>在回归问题中，常见的评估指标（Metric）有：
 平均绝对误差（Mean Absolute Error, MAE） 均方误差（Mean Square Error, MSE） 均方根误差（Root Mean Error, RMSE） 平均绝对百分误差（Mean Absolute Percentage Error, MAPE） R2  线性回归评估指标 平均绝对误差   公式 $$ MAE = \frac{1}{n} \sum^n_{i=1} |y_i - \hat{y_i}|, \in [0, +\infty) $$
  代码表示
def MAE(y, y_pre): return np.mean(np.abs(y - y_pre))   均方误差   公式 $$ MSE = \frac{1}{n} \sum^n_{i=1} (y_i - \hat{y_i})^2, \in[0, +\infty) $$
  代码表示
def MSE(y, y_pre): return np.</description>
    </item>
    
    <item>
      <title>基本特征选择方法</title>
      <link>https://horizonnn.github.io/post/%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 26 Sep 2020 11:08:40 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/</guid>
      <description>其中data为特征的DataFrame，y为目标值的Series，y_pre为预测值的Series
Filter 基于统计量的预处理   缺失值比例删除：删除高缺失值的特征（列）
percent = data.isnull().sum() / len(data) * 100 result = data.loc[percent &amp;lt; 50]   方差值删除：删除低方差的特征（列）
var = data.var() result = data.loc[var &amp;gt; 0.1]   相关性矩阵：首先计算出特征之间的相关性，然后根据相关性的大小排序，按顺序删除冗余的特征
# 将数值范围变化到0-1之间 data = data.apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x))) # 相关性矩阵 cor = data.corr() # 按相关性大小逐步剔除 drop_pairs = [] for i in range(len(cor.index)): for j in range(len(cor.columns)): if cor.iloc[i,j] &amp;gt;= 0.8 and i != j: drop_pairs.</description>
    </item>
    
    <item>
      <title>AndroidBugFlow</title>
      <link>https://horizonnn.github.io/post/androidbugflow/</link>
      <pubDate>Tue, 08 Sep 2020 21:05:54 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/androidbugflow/</guid>
      <description>1. android.content.ActivityNotFoundException: No Activity found to handle Intent   原因：在调用intent启动其他activity的时候，使用Uri.parse()时传递的网页url参数中没加“https://”前缀
  解决办法：在调用Uri.parse()函数的时候一定要把参数写完整，如
val intent = Intent(Intent.ACTION_VIEW) intent.data = Uri.parse(&amp;#34;https://www.baidu.com&amp;#34;) startActivity(intent)   </description>
    </item>
    
    <item>
      <title>Python常查问题</title>
      <link>https://horizonnn.github.io/post/python%E5%B8%B8%E6%9F%A5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 26 Aug 2020 17:27:58 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/python%E5%B8%B8%E6%9F%A5%E9%97%AE%E9%A2%98/</guid>
      <description>Seleunium 不打印chromedriver的日志信息 from selenium import webdriver chrome_options = Options() chrome_options.add_experimental_option(&amp;#39;excludeSwitches&amp;#39;, [&amp;#39;enable-logging&amp;#39;]) chrome_options.add_argument(&amp;#39;--headless&amp;#39;) browser = webdriver.Chrome(chrome_options=chrome_options) 使用chrome/firefox的已存在的cookie访问网站 chrome
from selenium import webdriver profile_dir=r&amp;#34;C:\Users\leonyu\AppData\Local\Google\Chrome\User Data&amp;#34; # 对应你的chrome的用户数据存放路径  chrome_options=webdriver.ChromeOptions() chrome_options.add_argument(&amp;#34;user-data-dir=&amp;#34;+os.path.abspath(profile_dir)) browser=webdriver.Chrome(chrome_options=chrome_options) firefox
from selenium import webdriver fp=webdriver.FirefoxProfile(r&amp;#39;C:\Users\leony\AppData\Roaming\Mozilla\Firefox\Profiles\btnc8mzb.default&amp;#39;) browser=webdriver.Firefox(fp) </description>
    </item>
    
    <item>
      <title>强化学习重要参考资源</title>
      <link>https://horizonnn.github.io/post/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E9%87%8D%E8%A6%81%E5%8F%82%E8%80%83%E8%B5%84%E6%BA%90/</link>
      <pubDate>Mon, 17 Aug 2020 10:48:11 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E9%87%8D%E8%A6%81%E5%8F%82%E8%80%83%E8%B5%84%E6%BA%90/</guid>
      <description>概述  David Sliver强化学习视频十讲 《Reinforcement Learning》书籍  博文  强化学习中Ornstein-Uhlenbeck噪声是鸡肋吗？ &amp;mdash; 说明了OU噪声并非比高斯噪声差，只是其在时序相关的问题中会作用更明显 Reinforcement learning never worked, and &amp;lsquo;deep&amp;rsquo; only helped a bit &amp;mdash; 虽然深度学习的泛化性对于强化学习中的探索利用平衡具有一定的帮助，但强化学习中还有其他一些很关键的问题深度学习并不能解决。 策略迭代和值迭代的区别 &amp;mdash; 通过算法对比阐述了策略迭代和值迭代的区别，适合初学者区分概念。 强化学习方法分类 &amp;mdash; 概述了强化学习中几个概念分类，便于初学者进行概念区分。  </description>
    </item>
    
    <item>
      <title>CBugFlow</title>
      <link>https://horizonnn.github.io/post/cbugflow/</link>
      <pubDate>Sat, 04 Jul 2020 11:50:58 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/cbugflow/</guid>
      <description>编译问题 1. fatal error C1083: 无法打开包括文件: “basetsd.h”: No such file or directory   错误：
fatal error C1083: 无法打开包括文件: “basetsd.h”: No such file or directory   原因：缺少basetsd.h文件
  解决办法：安装windows 10 SDK文件即可解决
  2. LINK : fatal error LNK1158: cannot run &amp;lsquo;rc.exe&amp;rsquo;   错误
LINK : fatal error LNK1158: cannot run &#39;rc.exe&#39;   原因：在PATH所提供的环境中搜索不到rc.exe程序
  解决办法：安装winsows 8.1 SDK，并将路径&amp;quot;C:\Program Files (x86)\Wexit()indows Kits\8.1\bin\x86&amp;quot;路径 添加到环境变量中。
  </description>
    </item>
    
    <item>
      <title>在win10下安装gym环境的两种办法</title>
      <link>https://horizonnn.github.io/post/%E5%9C%A8win10%E4%B8%8B%E5%AE%89%E8%A3%85gym%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Wed, 20 Nov 2019 22:23:45 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E5%9C%A8win10%E4%B8%8B%E5%AE%89%E8%A3%85gym%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/</guid>
      <description>Gym是强化学习中一个很重要的python库，里面包含了很多强化学习的环境。但比较可惜的是官方并没有提供Windows平台的支持，这对于习惯了Windows平台工作的强化学习研究人员来说很不方便，所以我找到了两个解决办法。
 直接在win 10上安装Gym环境 利用WSL( Windows Subsystem for Linux )安装Gym环境  直接在win 10上安装Gym环境 安装 Microsoft Visual C++ 2017 Build Tools  下载链接 : Visual Studio 安装 Microsoft Visual C++ 2017 Build Tools  在Anaconda中创建python环境并安装相应的packages   在Anaconda中创建python环境
conda create -n &amp;lt;your_env_name&amp;gt; python=3.6   如果需要在gym中录制视频，则需要安装ffmpeg
conda install -c conda-forge ffmpeg   首先需要安装一个空的gym环境，因为在后面安装完全的gym环境的过程中会出现mujoco环境的错误，虽然这不影响其他模块的使用，但会导致gym不会被添加到环境中，也就没有办法import。
conda install -c conda-forge gym   安装pystan是ToyText环境的需要
conda install -c conda-forge pystan   这一步是安装gym环境成功的关键，国外大神kojoley成功地封装了atari模块使得安装这一补丁后，atari环境能够在win 10环境下成功运行</description>
    </item>
    
    <item>
      <title>利用frp实现黑群晖内网穿透</title>
      <link>https://horizonnn.github.io/post/%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E9%BB%91%E7%BE%A4%E6%99%96%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Sat, 28 Sep 2019 20:37:36 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E5%88%A9%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E9%BB%91%E7%BE%A4%E6%99%96%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid>
      <description>前一段时间捡了一台暴风酷播云矿机，想着拿来做NAS，装了黑群晖，无奈的是没有公网IP，只能局域网访问，因此需要做内网穿透。
搜了搜方法，感觉frp还是比较不错的方案，开搞！
相关链接  frp的github链接 群晖的中文官网  准备工具  使用frp做内网穿透，首先需要一台具有公网IP的主机，这里我租用了一台VPS 去frp的github链接里根据个人NAS以及公网IP主机的型号下载对应的压缩文件 去群晖官网下载drive client  配置过程 服务端   解压公网IP主机对应的frp文件，只保存frps和frps.ini文件，删掉其他文件
  将上述两个文件上传到公网IP主机中
  编辑frps.ini文件（vim frps.ini），写入以下内容
[common] bind_port = 7000  vhost_http_port = 7008 vhost_https_port = 7010  dashboard_port = 7001 dashboard_user = admin dashboard_pwd = 123456 其中7008是http连接的端口，7001是frp后台管理的端口
此外，在主机中开启7000、7008、7001、7010、6690（后文中会说到为什么开启这个端口）端口
  运行frps
./frps -c ./frps.ini   客户端   解压公网IP主机对应的frp文件，只保存frpc和frpc.ini文件，删掉其他文件
  将上述两个文件上传到NAS主机中
  编辑frpc.ini文件（vim frpc.ini），写入以下内容
[common] server_addr = XXX.</description>
    </item>
    
    <item>
      <title>吉大校园网路由器配置</title>
      <link>https://horizonnn.github.io/post/%E5%90%89%E5%A4%A7%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 14 Sep 2019 21:36:16 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/%E5%90%89%E5%A4%A7%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>设备配置 路由器：NETGEAR 4300 v1
网线两根
刷路由器固件  去openwrt官网找到路由器对应的固件版本下载下来（一定要结尾是img的包，结尾是tar的是升级包）、 用网线连接PC和路由器的LAN口，在网页中输入192.168.1.1进入路由器管理界面。默认用户名是admin，密码是password 找到路由器固件升级的选项，选择刚才下好的img文件，开始固件升级。升级结束后可以再次进入192.168.1.1，若能进入openwrt的管理界面，则代表成功，这时用户名改成root，密码改为admin。 拔掉路由器电源，关闭路由器电源按钮。静置30s后再插上电源打开（不然无法开启5G信号）  配置路由器  再此进入openwrt的管理界面，在wireless中配置路由器的无线设置（密码，频率等） 进入interface选项中，配置WAN口的IP、网关、子网掩码等（根据在校园网申请IP后得到的信息一一填写，校园网上的MAC地址需要填写路由器WAN口的MAC地址） 配置路由器的ssh  设置脚本   ssh进入路由器，并执行如下命令
opkg update opkg install python-light opkg install python-pip opkg install coreutils-nohup   去这个地址https://github.com/drcoms/jlu-drcom-client下载newclient.py脚本，并根据自己的IP信息修改代码中的config部分。
server = &amp;#39;10.100.61.3&amp;#39;#学校的认证服务器 username=&amp;#39;zhuff5515&amp;#39;#用户名，和客户端一样 password=&amp;#39;11111111111&amp;#39;#密码，和客户端一样 host_ip = &amp;#39;49.140.110.110&amp;#39;#自己申请的ip地址 mac = 0xf01e567fe76b#网络中心上注册时IP对应的MAC，必须是路由器的MAC地址 host_name = &amp;#39;++++++++&amp;#39;#计算机名,随便写，不要超过71个字符 host_os = &amp;#39;Windows 10&amp;#39;#操作系统，不要超过128个字符   通过ssh工具，将修改好的newclient.py放在路由器的/usr/bin目录
  cd进入/usr/bin目录，执行如下命令
nohup python newclient.py &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 此时可以连上路由器的wifi或者LAN口，如果能够成功连接外网，则说明成功了。
  </description>
    </item>
    
    <item>
      <title>PythonBugFlow</title>
      <link>https://horizonnn.github.io/post/pythonbugflow/</link>
      <pubDate>Sun, 25 Aug 2019 21:21:34 +0800</pubDate>
      
      <guid>https://horizonnn.github.io/post/pythonbugflow/</guid>
      <description>基础问题 1. AttributeError: module &amp;lsquo;XXX&amp;rsquo; has no attribute &amp;lsquo;xxx&amp;rsquo;   原因：一般module和attribute的名字没有拼错的情况下，出现这类问题通常是因为这个py文件所在的目录中存在与module同名的py文件，导致python的错误调用。
  解决办法：更改文件名。
  2. AttributeError: module &amp;lsquo;XXX&amp;rsquo; has no attribute &amp;lsquo;XXX&amp;rsquo;  原因：一般情况下可能是因为拼写错误导致的改模块下确实没有对应的attribute。但还有另外一种情况是当前运行的python文件目录下有和此module模块重名的python文件，导致运行的python文件优先import了当前目录下的对应文件，所以不存在对应的attribute 解决办法：检查拼写错误或者改变文件名即可  TensorFlow 1. TypeError: Unexpected keyword argument passed to optimizer: name Traceback (most recent call last): File &amp;#34;visualizing_the_convnet.py&amp;#34;, line 3, in &amp;lt;module&amp;gt; model = load_model(&amp;#39;cats_and_dogs_small_2.h5&amp;#39;) ... TypeError: Unexpected keyword argument passed to optimizer: name   原因：这部分代码加载了H5文件保存的keras Model，但是由于保存Model和加载Model的keras的版本不一致，所以会产生这个问题
  解决办法：保持加载Model和保存Model的keras版本一致
  2.</description>
    </item>
    
  </channel>
</rss>
